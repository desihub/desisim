#!/usr/bin/env python

"""
MPI wrapper for newexp
"""

#- First parse arguments in case user is just running mpi-newexp --help
#- from login node where MPI doesn't work
from __future__ import absolute_import, division, print_function
import argparse
import subprocess
import sys

parser=argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

#- Required
parser.add_argument('--obslist', type=str, help="input surveysim obslist file")
parser.add_argument('--fiberassign', type=str, help="input fiberassign directory")
parser.add_argument('--mockdir', type=str, help="directory with mock targets and truth")

#- Optional
parser.add_argument('--outdir', type=str, help="output directory")
parser.add_argument('--tilefile', type=str, help="ASCII file with subset of tiles to process")
parser.add_argument('--nside', help='healpixel organization scheme of the mock spectra', type=int, default=64)
parser.add_argument('--force', action='store_true', help="force re-processing to overwrite pre-existing output files")
parser.add_argument('--nonuniform', action='store_true', help="simulate non-uniform calibration screen illumination")
parser.add_argument('--dryrun', action='store_true', help="print commands but don't run them")
parser.add_argument('--mpi', action='store_true', help="use MPI parallelism")
parser.add_argument('--start', metavar='YYYYMMDD', default=19000101, help="Start date (YEARMMDD).")
parser.add_argument('--stop', metavar='YYYYMMDD', default=21000101, help="Stop date (YEARMMDD).")

args = parser.parse_args()

#- Then load MPI and establish communication ASAP
if args.mpi:
    from mpi4py import MPI
    comm = MPI.COMM_WORLD
    size = comm.Get_size()
    rank = comm.Get_rank()
else:
    comm = None
    size = 1
    rank = 0

#- The proceed with other imports
import os, time
tstart = time.time()

import numpy as np

from astropy.table import Table

import desisim.io

if type(args.start) == str:
    args.start = args.start.replace('-', '')

if type(args.start) == str:
    args.stop = args.stop.replace('-', '')

def read_tiles(filename):
    if filename.endswith('.fits'):
        tilesubset = Table.read(filename, format='fits')['TILEID']
    elif filename.endswith('.ecsv'):
        tilesubset = Table.read(filename, format='ascii.ecsv')['TILEID']
    else:
        tilesubset = np.loadtxt(filename).astype(int)

    return tilesubset

#- Assemble full list of exposures
if rank == 0:
    if args.obslist.endswith('.ecsv'):
        obs = Table.read(args.obslist, format='ascii.ecsv')
    else:
        obs = Table.read(args.obslist)

    if 'EXPID' not in obs.colnames:
        print('WARNING: old obslist format without EXPID column; augmenting with EXPID and arc/flat exposures now')
        from surveysim.util import add_calibration_exposures
        obs = add_calibration_exposures(obs)

    if args.tilefile is not None:
        tilesubset = read_tiles(args.tilefile)
        indesi = np.in1d(obs['TILEID'], tilesubset)
        calib = obs['PROGRAM'] == 'CALIB'
        if np.any(indesi | calib):
            obs = obs[indesi | calib]
        else:
            raise ValueError('no tiles in {} found in {}'.format(args.tilefile, args.obslist))

    #- Check that exposures are sorted by MJD
    assert np.all(np.diff(obs['MJD']) >= 0)

else:
    obs = None

if comm is not None:
    obs = comm.bcast(obs, root=0)

#- Check which ones still need to be done
#- This could be distributed across ranks if needed to spread load
if rank == 0:
    todo = obs[:0].copy()
    for thisobs in obs:
        tonight = int(thisobs['NIGHT'])
        if (tonight < args.start) or (args.stop <= tonight):
            continue

        simspec = desisim.io.findfile('simspec', thisobs['NIGHT'], thisobs['EXPID'])
        if args.force or not os.path.exists(simspec):
            todo.add_row(thisobs)

        #- Sort todo by flavor so that one rank doesn't accidentally get a
        #- bunch of fast arcs
        todo.sort('FLAVOR')
else:
    todo = None

if comm is not None:
    todo = comm.bcast(todo, root=0)

#- Track failures from each rank, starting out optimistically
failed = False

#- Proceed with simulating exposures, using all ranks
if rank == 0:
    print('{} MPI ranks processing {}/{} exposures'.format(size, len(todo), len(obs)))

if rank < len(todo):
    for thisobs in todo[rank::size]:
        assert thisobs['FLAVOR'] in ('science', 'arc', 'flat')
        if thisobs['FLAVOR'] == 'science':
            cmd = "newexp-mock --obslist {} --fiberassign {} --mockdir {} --nside {}".format(
                args.obslist, args.fiberassign, args.mockdir, args.nside)
            if args.outdir is not None:
                cmd = cmd + " --outdir {}".format(args.outdir)
            cmd = cmd + " --clobber --expid {}".format(thisobs['EXPID'])
        elif thisobs['FLAVOR'] == 'flat':
            cmd = "newflat --night {} --expid {} --clobber".format(
                    thisobs['NIGHT'], thisobs['EXPID'])
            if args.nonuniform:
                cmd = cmd + " --nonuniform"
        elif thisobs['FLAVOR'] == 'arc':
            cmd = "newarc --night {} --expid {} --clobber".format(
                    thisobs['NIGHT'], thisobs['EXPID'])
            if args.nonuniform:
                cmd = cmd + " --nonuniform"

        #- TODO: what about logging?  Use desisim.pipe log redirection logic?

        print('RUNNING: {}'.format(cmd))
        sys.stdout.flush()
        if args.dryrun:
            continue

        try:
            logfile = desisim.io.findfile('simspec',
                thisobs['NIGHT'], thisobs['EXPID']).replace('.fits', '.log')
            print('logging {}-{} {} to {}'.format(
                thisobs['NIGHT'], thisobs['EXPID'], thisobs['FLAVOR'], logfile))

            #- Spawn call to avoid memory leak problems from repeated
            #- desisim.scripts.newexp_mock.main() calls within same interpreter
            with open(logfile, 'w') as logx:
                t0 = time.time()
                err = subprocess.call(cmd.split(), stdout=logx, stderr=logx)
                runtime = time.time() - t0
                if err == 0:
                    print("SUCCESS: {} night {} expid {} took {:.1f} seconds".format(
                        cmd.split()[0], thisobs['NIGHT'], thisobs['EXPID'],  runtime))
                else:
                    failed = True
                    print('FAILED: night {} expid {}; see {}'.format(
                        thisobs['NIGHT'], thisobs['EXPID'], logfile))

            sys.stdout.flush()
        except:
            print('FAILED: {}'.format(cmd))
            import traceback
            traceback.print_exc()
            sys.stdout.flush()

if comm is not None:
    failed = comm.gather(failed, root=0)

if rank == 0:
    import collections
    nflavor = collections.Counter([x['FLAVOR'] for x in todo])
    tottime = time.time() - tstart
    print('{:.1f} minutes for {} arc, {} flat, {} science exposures'.format(
        tottime/60, nflavor['arc'], nflavor['flat'], nflavor['science']
    ))
    if np.any(failed):
        print('Some ranks had failures')

if comm is not None:
    MPI.Finalize()

if np.any(failed):
    sys.exit(1)
else:
    sys.exit(0)
