#!/usr/bin/env python

"""
quickbrick - quickly generate DESI brick files

Stephen Bailey
Lawrence Berkeley National Lab
Fall 2015
"""

import sys, os
import numpy as np
import scipy.sparse
import string

from astropy.table import Table, Column, vstack

import desimodel.io
import specsim
import desispec
from desispec.log import get_logger
import desisim.templates
import desisim.obs

import desisim.targets

#- Parse command line options
import optparse
parser = optparse.OptionParser(usage = "%prog [options]")
parser.add_option("-b", "--brickname", type=str,  help="brickname")
parser.add_option(      "--objtype", type=str,  help="elg,lrg,qso,star or mix")
parser.add_option("-n", "--nspec", type=int,  help="number of spectra to simulate")
parser.add_option("-o", "--outdir", type=str,  help="output data directory; default .", default='.')
#- Average DESI airmass 1.25; (See Science Req. Doc L3.3.2)
parser.add_option("-a", "--airmass", type=float,  help="airmass [%default]", default=1.25)
parser.add_option("-t", "--testwavelength", type=float,  help="test quickbrick with a single emission line", default=None)
parser.add_option("-s", "--seed", type=int,  help="random seed", default=None)
parser.add_option("--wavestep", type=float,  help="initial sampling of templates", default=0.2)
parser.add_option("--downsampling", type=int,  help="downsampling value", default=3)
parser.add_option("--outdir_truth", type=str,  help="optional alternative outdir for truth files")
parser.add_option("-z","--zrange", type=str, help="redshift range of the form zmin:zmax (applies only to ELG,LRG,QSO)",default=None)

opts, args = parser.parse_args()
log = get_logger()
desiparams = desimodel.io.load_desiparams()

#- Check options.  TODO: make this better
assert opts.brickname is not None
assert opts.objtype is not None
opts.objtype = opts.objtype.upper()
assert opts.objtype in ['ELG', 'LRG', 'QSO', 'STAR', 'TEST', 'MIX']

#- Set random seed if defined                                                                                                                                                                          
if opts.seed is not None :
    np.random.seed(opts.seed)
    
#- Create the atmosphere module and the quick simulator object
atmosphere = specsim.atmosphere.Atmosphere(
    skyConditions='dark', basePath=os.environ['DESIMODEL'])
qsim = specsim.quick.Quick(
    atmosphere=atmosphere, basePath=os.environ['DESIMODEL'])

#- Wavelength grid to cover all channels
wavemin = desimodel.io.load_throughput('b').wavemin
wavemax = desimodel.io.load_throughput('z').wavemax
wave = np.arange(wavemin-1, wavemax+1, opts.wavestep)

#- If opts.objtype='MIX', get distribution of target types from sample_objtype
if opts.objtype.lower() == 'mix':
    true_objtype, target_objtype = desisim.targets.sample_objtype(opts.nspec)
    #- replace 'STD' by 'STAR' (otherwise quicksim.simulate won't work)
    k=np.where((true_objtype == 'STD'))
    true_objtype=true_objtype.astype('S10')
    true_objtype[k]='STAR'
else:
    true_objtype=np.tile(np.array([opts.objtype]),(opts.nspec))

truth=dict()
meta=Table()
truth['OBJTYPE']=np.zeros(opts.nspec, dtype='S10')
truth['FLUX']=np.zeros( (opts.nspec, len(wave)) )
truth['WAVE']=wave
jj=list()

zrange=None
if opts.zrange is not None :
    
    vals=opts.zrange.split(":")
    if len(vals)!=2 :
        log.error("cannot interpret zrange argument '%s', expect zmin:zmax"%opts.zrange)
        sys.exit(1)
    try :
        zmin=string.atof(vals[0])
        zmax=string.atof(vals[1])
    except ValueError :
        log.error("cannot interpret zrange argument '%s', expect zmin:zmax"%opts.zrange)
        sys.exit(1)
    if zmax<=zmin :
        log.error("zmax must be greater than zmin (and zmin=%f zmax=%f)"%(zmin,zmax))
        sys.exit(1)
    zrange=(zmin,zmax)
    log.info("will use custom redshift range %s"%str(zrange))


for objtype in set(true_objtype):
    ii = np.where(true_objtype == objtype)[0]
    nobj = len(ii)
    
    truth['OBJTYPE'][ii]=objtype   
    
#- Generate a set of templates
    if objtype == 'ELG':
        elg = desisim.templates.ELG(wave=wave)
        if zrange is not None :
            flux, tmpwave, meta1 = elg.make_templates(nmodel=nobj,seed=opts.seed,zrange=zrange)
        else :
            flux, tmpwave, meta1 = elg.make_templates(nmodel=nobj,seed=opts.seed)
        truth['FLUX'][ii]=flux
        meta=vstack([meta,meta1])
    elif objtype == 'LRG':
        lrg = desisim.templates.LRG(wave=wave)
        if zrange is not None :
            flux, tmpwave, meta1 = lrg.make_templates(nmodel=nobj,seed=opts.seed,zrange=zrange)
        else :
            flux, tmpwave, meta1 = elg.make_templates(nmodel=nobj,seed=opts.seed)
        truth['FLUX'][ii]=flux
        meta=vstack([meta,meta1])
    elif objtype == 'QSO':
        qso = desisim.templates.QSO(wave=wave)
        if zrange is not None :
            flux, tmpwave, meta1 = qso.make_templates(nmodel=nobj,seed=opts.seed,zrange=zrange)
        else :
            flux, tmpwave, meta1 = elg.make_templates(nmodel=nobj,seed=opts.seed)   
        truth['FLUX'][ii]=flux
        meta=vstack([meta,meta1])
    elif objtype =='STAR' or objtype == 'QSO_BAD': #- if objtype=QSO_BAD, use STAR template
        star = desisim.templates.STAR(wave=wave)
        flux, tmpwave, meta1 = star.make_templates(nmodel=nobj,seed=opts.seed)
        truth['FLUX'][ii]=flux
        meta=vstack([meta,meta1])
    elif objtype == 'SKY':
        flux = np.zeros((nobj, len(wave)))
        meta1 = Table(dict(REDSHIFT=np.zeros(nobj, dtype=np.float32)))
        truth['FLUX'][ii]=flux
        meta=vstack([meta,meta1])
    elif objtype == 'TEST':
        objtype='STAR' # for specsim
        flux = np.zeros((opts.nspec, len(wave)))
        i=np.where(wave>5800.-1e-6)[0][0]
        ref_integrated_flux=1.e-10
        ref_cst_flux_density=1.e-17

        single_line = (np.arange(opts.nspec)%2 == 0).astype(np.float32)
        continuum   = (np.arange(opts.nspec)%2 == 1).astype(np.float32)

        for spec in range(opts.nspec) :
            flux[spec,i] = single_line[spec]*ref_integrated_flux/np.gradient(wave)[i] # single line                                                                                                          
            flux[spec]   += continuum[spec]*ref_cst_flux_density # flat continuum                                                                                                                            

        #print "ref wave=",wave[i]                                                                                                                                                                              #print "ref integrated flux=",ref_integrated_flux,"ergs/s/cm2"                                                                                                                                       
        meta1 = Table(dict(REDSHIFT=np.zeros(opts.nspec, dtype=np.float32),
                          LINE=wave[i]*np.ones(opts.nspec, dtype=np.float32),
                          LINEFLUX=single_line*ref_integrated_flux,
                          CONSTFLUXDENSITY=continuum*ref_cst_flux_density))
        truth['FLUX'][ii]=flux
        meta=vstack([meta,meta1])

    jj.append(ii.tolist())


#- sanity check on units; templates currently return ergs, not 1e-17 ergs...
    assert (objtype == 'SKY') or (np.max(truth['FLUX']) < 1e-6)

#- Create a blank fake fibermap; this is re-used by all channels                                                                                                                                         
fibermap = desispec.io.empty_fibermap(opts.nspec)
targetids = np.random.randint(2**62, size=opts.nspec)
fibermap['TARGETID'] = targetids
night = desisim.obs.get_night()
expid = 0

#- Order meta table
jj=sum(jj,[])
meta_new=Table()
for k in range(opts.nspec):
    index=int(np.where(np.array(jj) == k)[0])
    meta_new=vstack([meta_new,meta[index]])
meta=meta_new

#- Add TARGETID and the true OBJTYPE to the template meta table                                                                                                                                         
meta.add_column(Column(true_objtype, dtype='S10', name='OBJTYPE'))
meta.add_column(Column(targetids, name='TARGETID'))

#- rename REDSHIFT -> TRUEZ anticipating later table joins with zbest.Z                                                                                                                                 
meta.rename_column('REDSHIFT', 'TRUEZ')

#- Actually do the simulations for each target
fluxunits = specsim.spectrum.SpectralFluxDensity.fiducialFluxUnit * 1e17
qsim.setWavelengthGrid(wavemin, wavemax, opts.wavestep)

#- output arrays to fill; these cover wavelengths across all cameras
srcflux={}
trueflux={}
obsivar={}
obswave=None
for channel in qsim.instrument.cameraBands :
    trueflux[channel]=list()
    obsivar[channel]=list()

#- convert list of arrays to 2D arrays
for i in range(opts.nspec):
    inspec = specsim.spectrum.SpectralFluxDensity(truth['WAVE'], truth['FLUX'][i], fluxUnits=fluxunits, extrapolatedValue=True)
    #- if objtype is QSO_BAD or TEST then simulate a star
    if (truth['OBJTYPE'][i] == 'QSO_BAD' or truth['OBJTYPE'][i] == 'TEST'): 
        truth['OBJTYPE'][i]='STAR'
    results = qsim.simulate(sourceType=truth['OBJTYPE'][i].lower(), sourceSpectrum=inspec, 
        airmass = opts.airmass, expTime = desiparams['exptime'], downsampling=opts.downsampling)
    
    #- output wavelength grid is the same for all spectra
    if obswave is None :
        obswave=results.wave
    else :
        assert (np.sum((obswave-results.wave)**2)==0.)
    
    # now we collect the results
    for channel in qsim.instrument.cameraBands :
        j = qsim.instrument.cameraBands.index(channel)
        trueflux[channel].append(results.camflux[:,j])
        obsivar[channel].append(results.camivar[:,j])

    # collect the source flux
    srcflux[i]=list()
    srcflux[i]=qsim.sourceFlux    

srcfl=dict()
srcfl['SOURCE']=np.zeros( (opts.nspec,len(qsim.wavelengthGrid)) )
for i in range(opts.nspec):
    srcflux[i]=np.array(srcflux[i])
    srcfl['SOURCE'][i] = srcflux[i]

#- convert list of arrays to 2D arrays
for channel in qsim.instrument.cameraBands :
    trueflux[channel] = np.array(trueflux[channel])
    obsivar[channel] = np.array(obsivar[channel])

#- add noise
noisyflux={}
for channel in qsim.instrument.cameraBands :
    noisyflux[channel] = np.zeros_like(trueflux[channel])
    ii = np.where(obsivar[channel] > 0.01)
    sigma = 1/np.sqrt(obsivar[channel][ii])
    noisyflux[channel][ii] = trueflux[channel][ii] + np.random.normal(loc=0, scale=sigma)

#- Select the wavelengths for each camera and output brick files
for channel in ['b', 'r', 'z']:    
    #- Sparse full resolution matrix for this camera
    j = qsim.instrument.cameraBands.index(channel)
    R = qsim.cameras[j].sparseKernel
        
    #- Trim R to range with non-zeros in even multiples of the downsampling
    nd = opts.downsampling
    ii = np.where(R.sum(axis=0).A[0])[0]
    begin, end = (ii[0]//nd)*nd, ((ii[-1]+1)//nd)*nd
    R = R[begin:end, begin:end]
    
    #- indices of downsampled flux, ivar to keep
    iiobs = np.arange(begin, end, nd) // nd
        
    #- Downsample the resolution matrix
    s = R.shape[1]//nd, nd, R.shape[0]//nd, nd
    Rx = R.toarray().reshape(s).sum(-1).sum(1) / nd
    Rdata = scipy.sparse.dia_matrix(Rx).data
    
    #- replicate for all spectra for the output file
    Rdata = np.array([Rdata for i in range(opts.nspec)])


#    print 'wavelenthGrid %s, sourceFlux %s'%(qsim.wavelengthGrid,qsim.sourceFlux)

    #- Write brick output
    filename = 'brick-{}-{}.fits'.format(channel, opts.brickname)
    filepath = os.path.join(opts.outdir, filename)
    if os.path.exists(filepath):
        os.remove(filepath)

    header = dict(BRICKNAM=opts.brickname, CHANNEL=channel)
    brick = desispec.io.Brick(filepath, mode='update', header=header)        
    brick.add_objects(noisyflux[channel][:,iiobs].astype(np.float32), obsivar[channel][:,iiobs].astype(np.float32),
        obswave[iiobs].astype(np.float32), Rdata.astype(np.float32), fibermap, night, expid)
    brick.close()

    #- Append truth to the file
    #- Note: Resolution convolved true flux, not high resolution source flux;
    #-       This makes chi2 calculations easier
    from astropy.io import fits

    if opts.outdir_truth is None : # add truth in same file 
        fx = fits.open(filepath, mode='append')
        header = desispec.io.fitsheader(header)
        fx.append(fits.ImageHDU(trueflux[channel][:,iiobs].astype(np.float32), name='_TRUEFLUX', header=header))
        if (channel == 'b'):
            fx.append(fits.ImageHDU(qsim.wavelengthGrid.astype(np.float32), name='_SOURCEWAVE', header=header))
            fx.append(fits.ImageHDU(srcfl['SOURCE'].astype(np.float32), name='_SOURCEFLUX', header=header))
        fx.append(fits.BinTableHDU(meta.as_array(), name='_TRUTH'))
        fx.flush()
        fx.close()
    else :
        header = desispec.io.fitsheader(header)
        hdulist = fits.HDUList([fits.PrimaryHDU(header=header)])
        hdulist.append(fits.ImageHDU(trueflux[channel][:,iiobs].astype(np.float32), name='_TRUEFLUX', header=header))
        if (channel == 'b'):
            hdulist.append(fits.ImageHDU(qsim.wavelengthGrid.astype(np.float32), name='_SOURCEWAVE', header=header))
            hdulist.append(fits.ImageHDU(srcfl['SOURCE'].astype(np.float32), name='_SOURCEFLUX', header=header))
        hdulist.append(fits.BinTableHDU(meta.as_array(), name='_TRUTH'))
        filename = 'truth-brick-{}-{}.fits'.format(channel, opts.brickname)
        filepath = os.path.join(opts.outdir_truth, filename)
        hdulist.writeto(filepath,clobber=True)

    
