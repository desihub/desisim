#!/usr/bin/env python

"""
quickcat v0 : simulates the data flow from fiber assignment output to
zcatalog creation.

WORK IN PROGRESS.
"""

import sys, os
import numpy as np
from astropy.table import Table, Column
import desispec.quickcat as qc

import optparse

parser = optparse.OptionParser(usage = "%prog [options]")
parser.add_option("-f", "--fibassign", type=str, help="fiber assignment dir")
parser.add_option('-t', "--tilelist",  type=str, help="file with list of observed tiles")
parser.add_option('-T', "--truth",     type=str, help="file with truth table")
parser.add_option('-z', "--zcat",      type=str, help="previous zcatalog to update")
parser.add_option('-o', "--output",    type=str, help="new zcatalog to write")
parser.add_option('-p', "--perfectz",  action="store_true", help="for redshift in = redshift out")
opts, args = parser.parse_args()

#-------------------------------------------------------------------------

#- Count how many times each target was observed for this set of tiles
obstiles = np.loadtxt(opts.tilelist, dtype=int)
nobs = dict()
for tile in obstiles:
    fafile = os.path.join(opts.fibassign, 'tile_{:05d}.fits'.format(tile))
    fibassign = Table.read(fafile, 'FIBER_ASSIGNMENTS', format='fits')
    for row in fibassign:
        targetid = row['TARGETID']
        if targetid != -1:
            if targetid not in nobs:
                nobs[targetid] = 1
            else:
                nobs[targetid] += 1

#- Read in previous zcat results
#- NOTE: assumes that the new tiles were not already included in existing zcat
if opts.zcat is not None:
    zcat = Table.read(opts.zcat, format='fits')
    for targetid, n in zip(zcat['TARGETID'], zcat['NUMOBS']):
        if targetid not in nobs:
            nobs[targetid] = 1
        else:
            nobs[targetid] += 1

#- Read the truth table
truth = Table.read(opts.truth)

#- Trim truth down to just ones that have already been observed
obs_targetids = np.array(nobs.keys())
iiobs = np.in1d(truth['TARGETID'], obs_targetids)
newzcat = truth[iiobs]
inputz=np.array(newzcat["Z"])
inputtype=np.array(newzcat["TYPE"])

            
#- Add numobs
nz = len(newzcat)
outz=np.zeros(nz)
newzcat.add_column(Column(name='NUMOBS', length=nz, dtype=int))

for i in range(len(newzcat)):
    newzcat['NUMOBS'][i] = nobs[newzcat['TARGETID'][i]]
    outz[i]=qc.apply_redshift_precision(inputtype[i],inputz[i],perfectz=opts.perfectz)

#- Replace the input z by precision applied z
z=Column(name='Z',data=outz)
newzcat['Z']=z

#- Add ZERR and ZWARN (Need to parametrize this!)
z_error = (outz-inputz) #?? Not sure if this is right here.
zerr  = Column(name='ZERR', data=z_error)
zwarn = Column(name='ZWARN', data=np.zeros(nz, dtype=np.int32))
newzcat.add_column(zerr)
newzcat.add_column(zwarn)

#- Write it out
newzcat.meta['EXTNAME'] = 'ZCATALOG'
if os.path.exists(opts.output):
    os.remove(opts.output)
newzcat.write(opts.output, format='fits')


