#!/usr/bin/env python

"""Simulate noiseless, infinite-resolution spectral templates for DESI.

TODO (@moustakas):
  * Simulate dopperlgangers, e.g., stars that pass the QSO selection criteria.
  * Generate QAplots.

"""
from __future__ import division, print_function

import os
import sys
import argparse

from desisim.io import write_templates
from desispec.log import get_logger

def main():

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description='Simulate noiseless, infinite-resolution spectral templates for DESI.')
                                         
    parser.add_argument('-n','--nmodel', type=long, default=None, metavar='', 
                        help='number of model (template) spectra to generate (required input)')
    # Optional inputs.
    parser.add_argument('-o','--objtype', type=str, default='ELG', metavar='', 
                        help='object type (ELG, LRG, STAR, or FSTD)') 
    parser.add_argument('--minwave', type=float, default=3600, metavar='', 
                        help='minimum output wavelength range [Angstrom]')
    parser.add_argument('--maxwave', type=float, default=10000, metavar='', 
                        help='maximum output wavelength range [Angstrom]')
    parser.add_argument('--cdelt', type=float, default=2, metavar='', 
                        help='dispersion of output wavelength array [Angstrom/pixel]')
    parser.add_argument('-s', '--seed', type=long, default=None, metavar='', 
                        help='random number seed')
    # Boolean keywords.
    parser.add_argument('--nocolorcuts', action='store_true', 
                        help="""do not apply color cuts to select objects (only used for
                        object types ELG, LRG, and QSO)""")
    parser.add_argument('--nocontinuum', action='store_true', 
                        help="""do not generate the continuum spectrum (only used for
                        object types ELG and LRG)""")
    parser.add_argument('--notemplates', action='store_true', 
                        help="""do not generate templates
                        (but do generate the diagnostic plots if OUTFILE exists)""")
    parser.add_argument('--noplots', action='store_true', 
                        help='do not generate diagnostic (QA) plots')
    parser.add_argument('-v', '--verbose', action='store_true', 
                        help='toggle on verbose output')

    # Output filenames.
    parser.add_argument('--outfile', type=str, default='OBJTYPE-templates.fits', metavar='', 
                        help='output FITS file name')
    parser.add_argument('--qafile', type=str, default='OBJTYPE-templates.pdf', metavar='', 
                        help='output file name for the diagnostic (QA) plots')
    
    # Objtype-specific defaults.
    bgs_parser = parser.add_argument_group('options for objtype=BGS')
    bgs_parser.add_argument('--zrange-bgs', type=float, default=(0.01,0.4), nargs=2, metavar='', 
                            help='minimum and maximum redshift')
    bgs_parser.add_argument('--rmagrange-bgs', type=float, default=(15.0,19.5), nargs=2, metavar='',
                            help='Minimum and maximum r-band (AB) magnitude range')
    bgs_parser.add_argument('--logvdisp-bgs', type=float, default=(2.0,0.17), nargs=2, metavar='',
                            help='Logarithmic mean and sigma (Gaussian) velocity dispersion values (km/s)')

    elg_parser = parser.add_argument_group('options for objtype=ELG')
    elg_parser.add_argument('--zrange-elg', type=float, default=(0.6,1.6), nargs=2, metavar='', 
                            dest='zrange_elg', help='minimum and maximum redshift')
    elg_parser.add_argument('--rmagrange-elg', type=float, default=(21.0,23.4), nargs=2, metavar='',
                            dest='rmagrange_elg', help='Minimum and maximum r-band (AB) magnitude range')
    elg_parser.add_argument('--logvdisp-elg', type=float, default=(1.9,0.15), nargs=2, metavar='',
                            help='Logarithmic mean and sigma (Gaussian) velocity dispersion values (km/s)')
    elg_parser.add_argument('--minoiiflux', type=float, default='1E-17', metavar='',
                            help='Minimum integrated [OII] 3727 flux')
    
    fstd_parser = parser.add_argument_group('options for objtype=FSTD')
    fstd_parser.add_argument('--vrad-fstd', type=float, default=(0,200), nargs=2, metavar='', 
                             help='mean and sigma radial velocity Gaussian prior (km/s)')
    fstd_parser.add_argument('--rmagrange-fstd', type=float, default=(16.0,19.0), nargs=2, metavar='',
                            help='Minimum and maximum r-band (AB) magnitude range')

    lrg_parser = parser.add_argument_group('options for objtype=LRG')
    lrg_parser.add_argument('--zrange-lrg', type=float, default=(0.5,1.1), nargs=2, metavar='', 
                            help='minimum and maximum redshift')
    lrg_parser.add_argument('--zmagrange-lrg', type=float, default=(19.0,20.5), nargs=2, metavar='',
                            help='Minimum and maximum z-band (AB) magnitude range')
    lrg_parser.add_argument('--logvdisp-lrg', type=float, default=(2.3,0.1), nargs=2, metavar='',
                            help='Logarithmic mean and sigma (Gaussian) velocity dispersion values (km/s)')
    
    qso_parser = parser.add_argument_group('options for objtype=QSO')
    qso_parser.add_argument('--zrange-qso', type=float, default=(0.5,4.0), nargs=2, metavar='', 
                            help='minimum and maximum redshift')
    qso_parser.add_argument('--rmagrange-qso', type=float, default=(21.0,23.0), nargs=2, metavar='',
                            help='Minimum and maximum r-band (AB) magnitude range')
    
    star_parser = parser.add_argument_group('options for objtype=STAR')
    star_parser.add_argument('--vrad-star', type=float, default=(0,200), nargs=2, metavar='', 
                             help='mean and sigma radial velocity Gaussian prior (km/s)')
    star_parser.add_argument('--rmagrange-star', type=float, default=(18,23.4), nargs=2, metavar='',
                            help='Minimum and maximum r-band (AB) magnitude range')

    wd_parser = parser.add_argument_group('options for objtype=WD')
    wd_parser.add_argument('--vrad-wd', type=float, default=(0,200), nargs=2, metavar='', 
                             help='mean and sigma radial velocity Gaussian prior (km/s)')
    wd_parser.add_argument('--gmagrange-wd', type=float, default=(16.0,19.0), nargs=2, metavar='',
                            help='Minimum and maximum g-band (AB) magnitude range')

    sne_parser = parser.add_argument_group('options for including SNeIa')
    sne_parser.add_argument('--sne-rfluxratiorange', type=float, default=(0.1,1.0), nargs=2, metavar='',
                            help='r-band flux ratio relative to the galaxy r-band magnitude')
    sne_parser.add_argument('--add-SNeIa', action='store_true', help='include SNeIa spectra')

    args = parser.parse_args()
    if args.nmodel is None:
        parser.print_help()
        sys.exit(1)

    # Set up the logger.
    if args.verbose:
        lvl = 'DEBUG'
    else:
        lvl = 'INFO'
    log = get_logger(level=lvl)

    objtype = args.objtype.upper()
    
    # Check that the right environment variable is set.
    key = 'DESI_BASIS_TEMPLATES'
    if key not in os.environ:
        log.fatal('Required ${} environment variable not set'.format(key))
        raise EnvironmentError('Required ${} environment variable not set'.format(key))
            
    # Set default output file name.
    if args.outfile:
        outfile = args.outfile
        if outfile == 'OBJTYPE-templates.fits':
            outfile = objtype.lower()+'-templates.fits'
    else: 
        outfile = objtype.lower()+'-templates.fits'
    
    log.info('Building {} {} templates.'.format(args.nmodel, objtype))

    # Possible pack the optional inputs into a dictionary to be added to the
    # output FITS header.
    # cmd = " ".join(sys.argv)
    # header_comments = vars(args)

    # Call the right Class depending on the object type.
    if not args.notemplates:
        if objtype == 'BGS':
            from desisim.templates import BGS
            bgs = BGS(minwave=args.minwave, maxwave=args.maxwave, cdelt=args.cdelt,
                      add_SNeIa=args.add_SNeIa)
            flux, wave, meta = bgs.make_templates(nmodel=args.nmodel,
                                                  zrange=args.zrange_bgs,
                                                  logvdisp_meansig=args.logvdisp_bgs,
                                                  rmagrange=args.rmagrange_bgs,
                                                  sne_rfluxratiorange=args.sne_rfluxratiorange, 
                                                  seed=args.seed,
                                                  nocontinuum=args.nocontinuum)
        elif objtype == 'ELG':
            from desisim.templates import ELG
            elg = ELG(minwave=args.minwave, maxwave=args.maxwave, cdelt=args.cdelt,
                      add_SNeIa=args.add_SNeIa)
            #import numpy as np
            #rand = np.random.RandomState(args.seed)
            #redshift = rand.uniform(0.7, 1.6, 50)
            flux, wave, meta = elg.make_templates(nmodel=args.nmodel,
                                                  zrange=args.zrange_elg,
                                                  logvdisp_meansig=args.logvdisp_elg,
                                                  rmagrange=args.rmagrange_elg,
                                                  minoiiflux=args.minoiiflux,
                                                  seed=args.seed,
                                                  nocolorcuts=args.nocolorcuts,
                                                  nocontinuum=args.nocontinuum)
                                                  #redshift=redshift)
        elif objtype == 'LRG':
            from desisim.templates import LRG
            lrg = LRG(minwave=args.minwave, maxwave=args.maxwave, cdelt=args.cdelt,
                      add_SNeIa=args.add_SNeIa)
            flux, wave, meta = lrg.make_templates(nmodel=args.nmodel,
                                                  zrange=args.zrange_lrg,
                                                  zmagrange=args.zmagrange_lrg,
                                                  logvdisp_meansig=args.logvdisp_lrg,
                                                  seed=args.seed,
                                                  nocolorcuts=args.nocolorcuts)
        elif objtype == 'QSO':
            from desisim.templates import QSO
            qso = QSO(minwave=args.minwave, maxwave=args.maxwave, cdelt=args.cdelt)
            flux, wave, meta = qso.make_templates(nmodel=args.nmodel,
                                                  zrange=args.zrange_qso,
                                                  rmagrange=args.rmagrange_qso,
                                                  seed=args.seed,
                                                  nocolorcuts=args.nocolorcuts)
        elif objtype == 'STAR':
            from desisim.templates import STAR
            star = STAR(minwave=args.minwave, maxwave=args.maxwave, cdelt=args.cdelt)
            flux, wave, meta = star.make_templates(nmodel=args.nmodel,
                                                   vrad_meansig=args.vrad_star,
                                                   rmagrange=args.rmagrange_star,
                                                   seed=args.seed)
        elif objtype == 'WD':
            from desisim.templates import WD
            wd = WD(minwave=args.minwave, maxwave=args.maxwave, cdelt=args.cdelt)
            flux, wave, meta = wd.make_templates(nmodel=args.nmodel,
                                                 vrad_meansig=args.vrad_wd,
                                                 gmagrange=args.gmagrange_wd,
                                                 seed=args.seed)
        elif objtype == 'FSTD':
            from desisim.templates import FSTD
            fstd = FSTD(minwave=args.minwave, maxwave=args.maxwave, cdelt=args.cdelt)
            flux, wave, meta = fstd.make_templates(nmodel=args.nmodel,
                                                   vrad_meansig=args.vrad_fstd,
                                                   rmagrange=args.rmagrange_fstd,
                                                   seed=args.seed)
        elif objtype == 'MWS_STAR':
            from desisim.templates import MWS_STAR
            mws = MWS_STAR(minwave=args.minwave, maxwave=args.maxwave, cdelt=args.cdelt)
            flux, wave, meta = mws.make_templates(nmodel=args.nmodel,
                                                  vrad_meansig=args.vrad_fstd,
                                                  rmagrange=args.rmagrange_fstd,
                                                  seed=args.seed)
        elif objtype == 'SNE':
            from desisim.templates import SNE
            sne = SNE(minwave=args.minwave, maxwave=args.maxwave, cdelt=args.cdelt)
            flux, wave, meta = sne.make_templates(nmodel=args.nmodel,
                                                  zrange=args.zrange_sne,
                                                  rfluxratio=args.rfluxratio_sne,
                                                  epoch=args.epoch_sne,
                                                  seed=args.seed)
        else:
            log.warning('Object type {} not recognized'.format(objtype))
            sys.exit(1)

    log.info('Writing {}'.format(outfile))
    write_templates(outfile, flux, wave, meta, objtype)
            
    # Generate diagnostic QAplots (just a placeholder right now).
    if not args.noplots:
        import matplotlib.pyplot as plt
        if args.qafile:
            qafile = args.qafile
            if qafile == 'OBJTYPE-templates.pdf':
                qafile = objtype.lower()+'-templates.pdf'
            else: 
                qafile = objtype.lower()+'-templates.pdf'

if __name__ == '__main__':
    main()
